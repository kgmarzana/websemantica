%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2392 601
%%HiResBoundingBox: 0 0 2391.1199 600.95996
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2391.1199 600.95996 re
W
q
[0.24 0 0 -0.24 0 600.95996] cm
q
0 0 9962.5 2503.125 re
W*
q
[32.922749 0 0 32.932343 111.975647 -393.50861] cm
/DeviceRGB {} CS
[0.1882 0.2941 0.1961] SC
/DeviceRGB {} cs
[0.1882 0.2941 0.1961] sc
7 47 m
6.171 47 5.5 47.671001 5.5 48.5 c
5.5 51.5 l
5.5 52.328999 6.171 53 7 53 c
7.829 53 8.5 52.328999 8.5 51.5 c
8.5 48.5 l
8.5 47.671001 7.829 47 7 47 c
h
f
12.733 41.603001 m
11.903999 41.603001 11.233 42.274002 11.233 43.103001 c
11.233 56.898003 l
11.233 57.727001 11.903999 58.398003 12.733 58.398003 c
13.562 58.398003 14.233 57.727001 14.233 56.898003 c
14.233 43.103001 l
14.233 42.273998 13.562 41.603001 12.733 41.603001 c
h
f
18.466999 44.667 m
17.637999 44.667 16.966999 45.338001 16.966999 46.167 c
16.966999 53.834 l
16.966999 54.662998 17.637999 55.334 18.466999 55.334 c
19.296 55.334 19.966999 54.662998 19.966999 53.834 c
19.966999 46.167 l
19.967001 45.338001 19.295 44.667 18.466999 44.667 c
h
f
24.200001 36.375 m
23.371 36.375 22.700001 37.046001 22.700001 37.875 c
22.700001 62.125 l
22.700001 62.953999 23.371 63.625 24.200001 63.625 c
25.029001 63.625 25.700001 62.953999 25.700001 62.125 c
25.700001 37.875 l
25.700001 37.046001 25.028999 36.375 24.200001 36.375 c
h
f
29.933001 28.833 m
29.104 28.833 28.433001 29.504 28.433001 30.333 c
28.433001 69.666 l
28.433001 70.495003 29.104 71.166 29.933001 71.166 c
30.762001 71.166 31.433001 70.495003 31.433001 69.666 c
31.433001 30.333 l
31.433001 29.504999 30.761999 28.833 29.933001 28.833 c
h
f
35.667 37.333 m
34.838001 37.333 34.167 38.004002 34.167 38.833 c
34.167 61.166 l
34.167 61.994999 34.838001 62.666 35.667 62.666 c
36.495998 62.666 37.167 61.994999 37.167 61.166 c
37.167 38.833 l
37.167 38.005001 36.494999 37.333 35.667 37.333 c
h
f
41.534 29.834999 m
40.664001 29.810999 40.028999 30.497 40.024002 31.324999 c
39.775002 68.655998 l
39.77 69.484001 40.437 70.159996 41.265003 70.166 c
41.268002 70.166 41.271004 70.166 41.275002 70.166 c
42.099003 70.166 42.77 69.500999 42.775002 68.676003 c
43.024002 31.345001 l
43.029999 30.517 42.362999 29.84 41.534 29.834999 c
h
f
47.132999 20.849001 m
46.304001 20.849001 45.632999 21.52 45.632999 22.349001 c
45.632999 77.652 l
45.632999 78.481003 46.304001 79.152 47.132999 79.152 c
47.961998 79.152 48.632999 78.481003 48.632999 77.652 c
48.632999 22.349001 l
48.632999 21.52 47.962002 20.849001 47.132999 20.849001 c
h
f
52.867001 27.25 m
52.038002 27.25 51.367001 27.921 51.367001 28.75 c
51.367001 71.25 l
51.367001 72.079002 52.038002 72.75 52.867001 72.75 c
53.695999 72.75 54.367001 72.079002 54.367001 71.25 c
54.367001 28.75 l
54.367001 27.921 53.695 27.25 52.867001 27.25 c
h
f
58.599998 37.333 m
57.771 37.333 57.099998 38.004002 57.099998 38.833 c
57.099998 61.166 l
57.099998 61.994999 57.771 62.666 58.599998 62.666 c
59.428997 62.666 60.099998 61.994999 60.099998 61.166 c
60.099998 38.833 l
60.099998 38.005001 59.429001 37.333 58.599998 37.333 c
h
f
64.333 31 m
63.504002 31 62.833 31.671 62.833 32.5 c
62.833 67.5 l
62.833 68.329002 63.504002 69 64.333 69 c
65.162003 69 65.833 68.329002 65.833 67.5 c
65.833 32.5 l
65.833 31.671 65.162003 31 64.333 31 c
h
f
70.067001 39.632 m
69.237999 39.632 68.567001 40.303001 68.567001 41.132 c
68.567001 58.867001 l
68.567001 59.695999 69.237999 60.367001 70.067001 60.367001 c
70.896004 60.367001 71.567001 59.695999 71.567001 58.867001 c
71.567001 41.132 l
71.567001 40.304001 70.896004 39.632 70.067001 39.632 c
h
f
75.800003 43.5 m
74.971001 43.5 74.300003 44.171001 74.300003 45 c
74.300003 55 l
74.300003 55.828999 74.971001 56.5 75.800003 56.5 c
76.629005 56.5 77.300003 55.828999 77.300003 55 c
77.300003 45 l
77.300003 44.171001 76.627998 43.5 75.800003 43.5 c
h
f
81.532997 41.735001 m
80.703995 41.735001 80.032997 42.406002 80.032997 43.235001 c
80.032997 56.764999 l
80.032997 57.593998 80.703995 58.264999 81.532997 58.264999 c
82.362 58.264999 83.032997 57.593998 83.032997 56.764999 c
83.032997 43.235001 l
83.032997 42.405998 82.362 41.735001 81.532997 41.735001 c
h
f
87.266998 45.990002 m
86.437996 45.990002 85.766998 46.661003 85.766998 47.490002 c
85.766998 52.511002 l
85.766998 53.34 86.437996 54.011002 87.266998 54.011002 c
88.096001 54.011002 88.766998 53.34 88.766998 52.511002 c
88.766998 47.490002 l
88.766998 46.660999 88.095001 45.990002 87.266998 45.990002 c
h
f
93 47.417 m
92.170998 47.417 91.5 48.088001 91.5 48.917 c
91.5 51.084 l
91.5 51.912998 92.170998 52.584 93 52.584 c
93.829002 52.584 94.5 51.912998 94.5 51.084 c
94.5 48.917 l
94.5 48.088001 93.829002 47.417 93 47.417 c
h
f
Q
q
[49.117931 0 0 49.132244 3828.8474 10.704829] cm
/DeviceRGB {} CS
[0.1882 0.2941 0.1961] SC
/DeviceRGB {} cs
[0.1882 0.2941 0.1961] sc
5.16 39.52 m
3.52 40.52 l
3.32 40.639999 3.2 40.639999 3.04 40.600002 c
2.48 40.400002 l
2.32 40.360001 2.28 40.280003 2.32 40.080002 c
2.44 39.52 2.44 36.200001 2.44 33.200001 c
2.44 18.280001 l
2.44 15.6 1.92 15.120001 0.68 14.76 c
0.12 14.6 l
-0.32 14.480001 -0.4 14.400001 -0.4 14.280001 c
-0.4 13.800001 l
-0.4 13.680001 -0.32 13.520001 0.04 13.400002 c
2.04 12.840001 4.56 11.840002 6.119999 11.120002 c
6.799999 10.760002 7.119999 10.520001 7.52 10.520001 c
7.92 10.520001 8 10.800001 8 11.200002 c
8 11.520001 7.719999 16.080002 7.679999 20.000002 c
7.599999 24.560001 l
9.039999 23.120001 10.959999 22.640001 12.959999 22.640001 c
15.56 22.640001 17.599998 24.360001 18.639999 26.040001 c
19.32 27.120001 19.799999 28.6 19.799999 31.200001 c
19.799999 35.400002 15.799999 40.560001 10.639999 40.560001 c
7.999999 40.560001 6.48 40.080002 5.159999 39.52 c
5.16 39.52 l
h
7.64 26.24 m
7.64 31.48 l
7.64 34.799999 7.6 36.279999 8.12 37.32 c
8.68 38.360001 9.36 39.040001 10.44 39.040001 c
11.599999 39.040001 13 38.639999 13.759999 36.959999 c
14.599999 35.119999 14.4 34.119999 14.4 32.52 c
14.4 27.24 12.2 25.48 10.119999 25.48 c
9.399999 25.48 8.439999 25.719999 7.639999 26.24 c
7.64 26.24 l
h
36.560001 30.040001 m
27.400002 30.040001 l
27.400002 31.120001 l
27.400002 35.279999 29.760002 37.32 32.68 37.32 c
34.639999 37.32 36.240002 36.400002 37.040001 35.119999 c
37.120003 34.919998 37.280003 34.879997 37.440002 35 c
38.120003 35.360001 l
38.280003 35.440002 38.400002 35.639999 38.040001 36.32 c
37.32 37.799999 34.720001 40.559998 30.960001 40.559998 c
28.400002 40.559998 26.280001 40.119999 24.960001 38.679996 c
22.920002 36.479996 22.240002 34.919998 22.200001 31.799995 c
22.200001 30.679995 22.200001 28.559996 24 25.919994 c
25.440001 23.799995 27.880001 22.639994 30.959999 22.639994 c
37.439999 22.639994 37.799999 28.839993 37.799999 29.479994 c
37.799999 29.999994 37.439999 30.039993 36.559998 30.039993 c
36.560001 30.040001 l
h
27.440001 28.52 m
31.280001 28.52 l
32.16 28.52 32.560001 28.32 32.560001 27.720001 c
32.560001 25.960001 31.840002 24.240002 30.600002 24.240002 c
28.720003 24.240002 27.720001 25.720001 27.440002 28.520002 c
27.440001 28.52 l
h
47.439999 24.52 m
47.439999 32 l
47.439999 33.599998 47.439999 36.200001 47.559998 37.360001 c
47.599998 38.040001 47.719997 38.600002 48.559998 38.600002 c
49.919998 38.600002 l
50.279999 38.600002 50.359997 38.720001 50.359997 38.960003 c
50.359997 39.720001 l
50.359997 39.960003 50.279995 40.120003 50.119995 40.120003 c
49.839996 40.120003 48.079994 40.000004 44.919994 40.000004 c
41.559994 40.000004 39.959995 40.120003 39.599995 40.120003 c
39.399994 40.120003 39.319996 39.960003 39.319996 39.640003 c
39.319996 38.960003 l
39.319996 38.680004 39.399998 38.600002 39.839996 38.600002 c
41.039997 38.600002 l
41.479996 38.600002 42.119999 38.320004 42.119999 36.880001 c
42.119999 24.16 l
42.119999 21.32 42.119999 18.08 42.039997 17.040001 c
41.959995 15.680001 41.119999 15.120001 39.839996 14.720001 c
39.119995 14.480001 l
38.839996 14.360002 38.799995 14.240002 38.799995 14.040002 c
38.799995 13.440002 l
38.799995 13.320002 38.879997 13.160002 39.159996 13.120002 c
40.959995 12.760002 45.119995 11.400002 46.279995 10.800002 c
46.719994 10.600002 46.959995 10.520002 47.159996 10.520002 c
47.399998 10.520002 47.559998 10.720002 47.519997 11.240003 c
47.479996 13.440002 47.439995 21.760002 47.439995 24.520002 c
47.439999 24.52 l
h
59 31 m
59 34.16 l
59 37.439999 60.240002 38.16 61.200001 38.16 c
62.040001 38.16 62.639999 38.040001 63.279999 37.68 c
63.399998 37.599998 63.52 37.599998 63.639999 37.84 c
63.919998 38.439999 l
64.040001 38.639999 63.919998 38.84 63.759998 38.959999 c
63.079998 39.439999 61.279999 40.559998 58.16 40.559998 c
55.439999 40.559998 53.720001 38.679996 53.720001 36.839996 c
53.720001 35.439995 53.800003 32.399998 53.800003 30.879997 c
53.840004 25.599997 l
51.640003 25.599997 l
51.280003 25.599997 51.000004 25.439997 51.000004 25.039997 c
51.000004 24.639997 51.240005 24.359997 51.880005 24.039997 c
53.200005 23.439997 56.560005 20.439997 58.040005 18.759996 c
58.320004 18.439997 58.600006 18.359997 58.800003 18.359997 c
59.160004 18.359997 59.320004 18.639997 59.320004 18.959997 c
59.160004 23.199997 l
64.240005 23.199997 l
64.480003 23.199997 64.600006 23.399998 64.520004 23.559998 c
64.120003 25.279997 l
64.080002 25.439997 64 25.599997 63.760002 25.599997 c
59.080002 25.599997 l
59 27.239996 59 29.159996 59 30.999996 c
59 31 l
h
71.839996 38.560001 m
75.439995 38.560001 l
76.559998 38.560001 78.559998 37.880001 81.519997 34.440002 c
81.759995 34.160004 81.919998 34.160004 82.039993 34.240002 c
82.55999 34.640003 l
82.719994 34.760002 82.759987 34.840004 82.639992 35.040005 c
79.959991 40.480003 l
79.319992 40.240002 77.359993 40.120003 75.359993 40.080002 c
73.359993 40 71.319992 40 70.479996 40 c
65.799995 40 l
65.359993 40 65.159996 39.720001 65.639992 38.959999 c
74.919991 24.599998 l
72.119987 24.599998 l
69.999985 24.599998 69.039986 24.959999 65.839989 28.959999 c
65.679985 29.16 65.519989 29.119999 65.359985 29 c
64.879982 28.68 l
64.759979 28.6 64.719978 28.48 64.79998 28.280001 c
67.039978 22.52 l
67.919975 22.720001 68.679977 22.880001 69.359978 22.960001 c
70.839981 23.160002 71.559975 23.200001 74.79998 23.200001 c
80.999977 23.200001 l
81.399979 23.200001 81.599976 23.6 81.359978 24 c
71.839996 38.560001 l
h
98 30.040001 m
88.839996 30.040001 l
88.839996 31.120001 l
88.839996 35.279999 91.199997 37.32 94.119995 37.32 c
96.079994 37.32 97.679993 36.400002 98.479996 35.119999 c
98.559998 34.919998 98.719994 34.879997 98.879997 35 c
99.559998 35.360001 l
99.720001 35.440002 99.839996 35.639999 99.479996 36.32 c
98.759995 37.799999 96.159996 40.559998 92.399994 40.559998 c
89.839996 40.559998 87.719994 40.119999 86.399994 38.679996 c
84.359993 36.479996 83.679993 34.919998 83.639992 31.799995 c
83.639992 30.679995 83.639992 28.559996 85.439995 25.919994 c
86.879997 23.799995 89.319992 22.639994 92.399994 22.639994 c
98.879997 22.639994 99.23999 28.839993 99.23999 29.479994 c
99.23999 29.999994 98.87999 30.039993 97.999992 30.039993 c
98 30.040001 l
h
88.879997 28.52 m
92.720001 28.52 l
93.599998 28.52 94 28.32 94 27.720001 c
94 25.960001 93.279999 24.240002 92.040001 24.240002 c
90.160004 24.240002 89.160004 25.720001 88.879997 28.520002 c
88.879997 28.52 l
h
108.040001 38.560001 m
111.639999 38.560001 l
112.760002 38.560001 114.760002 37.880001 117.720001 34.440002 c
117.959999 34.160004 118.120003 34.160004 118.239998 34.240002 c
118.759995 34.640003 l
118.919998 34.760002 118.959991 34.840004 118.839996 35.040005 c
116.159996 40.480003 l
115.519997 40.240002 113.559998 40.120003 111.559998 40.080002 c
109.559998 40 107.519997 40 106.68 40 c
102 40 l
101.559998 40 101.360001 39.720001 101.839996 38.959999 c
111.119995 24.599998 l
108.319992 24.599998 l
106.199989 24.599998 105.23999 24.959999 102.039993 28.959999 c
101.87999 29.16 101.719994 29.119999 101.55999 29 c
101.079987 28.68 l
100.959984 28.6 100.919983 28.48 100.999985 28.280001 c
103.239983 22.52 l
104.11998 22.720001 104.879982 22.880001 105.559982 22.960001 c
107.039986 23.160002 107.759979 23.200001 110.999985 23.200001 c
117.199982 23.200001 l
117.599983 23.200001 117.79998 23.6 117.559982 24 c
108.040001 38.560001 l
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
